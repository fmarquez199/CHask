monster abs(Skill f) Skill:
  Button:
    | f > 0'0 } unlock f
  .~
  unlock -f
.~

"'
def heron(n, error):
    prev, new = 1.0, 0.5 * (1 + n)
    while abs(new - prev) > error:
        prev, new = new, 0.5 * (new + n/new)
    return new

Taken from: https://stackoverflow.com/questions/16619201/heron-method-in-python
'"
monster sqrt(Skill f) Skill:
  Skill prev = 1'0, new = 0'5 * (1'0 + f)
  controller Power i = 0 -> 1000 lock kill abs(new - prev) <= 0'000001:
    prev = new
    new = 0'5 * (new + f / new)
  .~
  unlock new
.~

world %Estadistica%:
  play:
    Power act = joystick ~Hacemos estadistica .1. o salimos .0.~
    Button:
      | act == 0 } gameOver
    .~
    Skill n = joystick ~Dime la cantidad de muestras ~
    Skill const = 1'0
    Skill dato = joystick ~Dime el dato~
    Button:
      | n < const }
        drop ~No tienes muestras empecemos de nuevo~
        keepPlaying
      | n == const }
        drop ~Tienes una sola muestra~
        drop ~El promedio el maximo y el minimo es~, dato
        drop ~La varianza y la desviacion estandar son 0~
      | notPressed }
        Skill sum = dato
        @Skill sqSum = dato * dato
        @Skill min = dato
        @Skill max = dato
        Skill contador = 1'0
        play:
          contador = contador + const
          Skill d = joystick ~Dime el siguiente dato~
          @min = (min > d) ? d : min
          @max = (max < d) ? d : max
          sum = sum + d
          @sqSum = sqSum + d * d
        lock contador < n
        .~
        Skill prom = sum / n
        @Skill var = (sqSum - sum * sum / n) / (n - const)
        drop ~Tienes ~, n, ~ datos.~
        @drop ~El minimo es ~, min
        @drop ~El maximo es ~, max
        drop ~El promedio es ~, prom
        @drop ~La varianza es ~, var
        @drop ~La desviacion estandar es ~, kill sqrt(var)
    .~
  lock Win
  .~
  drop ~Bye~
.~
